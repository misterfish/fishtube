#!/usr/bin/perl

our $bin_dir;

BEGIN {
    use File::Basename;
    my $d = dirname $0;
    if (-l $0) {
        my $l = dirname readlink $0;
        $bin_dir = $l;
        $bin_dir = "$d/$bin_dir" unless $l =~ m|^/|;
    }
    else {
        $bin_dir = $d;
    }
    push @INC, $bin_dir;
    push @INC, "$bin_dir/../../..";
}

use warnings;
use strict;

$| = 1;

use Proc::SyncExec (qw/ sync_exec sync_popen_noshell /);
use Proc::ProcessTable;

use Time::HiRes 'sleep';
use File::stat;

use Getopt::Std;
use Fish::Youtube::Utility;
sub _ { return RESET }

sub error;

my $DIR = '/tmp';
my $PID_FILE = '/tmp/.yt-pid';
my $FILENAME_FILE = '/tmp/.yt-file';
my $DEFAULT_SIZE = 'medium';

my $NUM_BYTES_BEFORE_PLAY = 1e6;

my $LOG_FILE_O = '/tmp/yt-log-out';
my $LOG_FILE_E = '/tmp/yt-log-err';

Fish::Youtube::Utility->debug_level(1);

use 5.10.0;

my %opts;
getopts('khg:n:u:atflF', \%opts);

my $USAGE = "Usage: $0 -k | [-a | -t | -f | -u url] [-l (to log)] [-g gain] [-F to pass force to yt-get] [-n num=1]\n";

my $Child_pid;
my $Out_file;

#my $Yg = "$bin_dir/youtube-get";
my $Yg = "$bin_dir/yt-get";

if (! -x $Yg) {
    $Yg = sys_chomp qq, which youtube-get ,;
}

$opts{h} and die $USAGE;

shift and die $USAGE;

if ($opts{l}) {
    open STDOUT, ">>$LOG_FILE_O" or die $!;
    open STDERR, ">>$LOG_FILE_E" or die $!;
}

if (delete $opts{k}) {
    keys %opts and die "-k must be alone.\n";
    if (-e $PID_FILE) {
        open my $fh, $PID_FILE or die "Can't open $PID_FILE: $!";
        while (<$fh>) {
            chomp;
            sys "kill $_", 0;
        }
        sys qq. rm "$PID_FILE" .;
    }
    exit 0;
}

$opts{g} //= '';
my $num = $opts{n} // 1;
$num or die "-n can't be 0.\n";

if ($opts{u}) {
    $opts{f} and die $USAGE;
    $opts{t} and die $USAGE;
    $opts{a} and die $USAGE;
    # call youtube-get and return name
    # doesn't play though ??
    $Out_file = get_movie($opts{u});
}
elsif ($opts{a}) {
    $opts{f} and die $USAGE;
    $opts{t} and die $USAGE;
    $opts{u} and die $USAGE;
    $Out_file = get_movie_from_temp() || get_movie_from_fd();
} 
elsif ($opts{f}) {
    $opts{a} and die $USAGE;
    $opts{t} and die $USAGE;
    $opts{u} and die $USAGE;

    $Out_file = get_movie_from_fd();
    info 'out_file ->', $Out_file ? CY $Out_file : BR 'none';
    exit 0;
}
elsif ($opts{t}) {
    $opts{a} and die $USAGE;
    $opts{f} and die $USAGE;
    $opts{u} and die $USAGE;
    $Out_file = get_movie_from_temp();
    info 'out_file ->', $Out_file ? CY $Out_file : BR 'none';
}
else {
    # call youtube-get and return name
    $Out_file = get_movie_from_browser_history();
}

exit 0;

sub get_movie_from_temp {
    my $file;
    chomp ($file=`ls /tmp/Flash* -tr1 | tail -n $num | head -n 1`);
    return $file;
}

sub get_movie_from_fd {
    my @pids = list scalar sysl qq. ps auxw | grep plugin-container | grep libflashplayer | grep xul | grep -v grep | awk '{ print \$2 }' .;
    for my $p (@pids) {
        #chomp $p;
        $p or return;
        my $s = sys qq. ls -l /proc/$p/fd/* | grep deleted ., 0;
        #$s =~ s|(/.+?\s)| sprintf "%s%s%s", G, $1, _ |eg;

        # throw the last one into xclip
        while ($s =~ s| (\S+) ( \s -> \s )(/tmp/Flash\S+)| Y($1) . $2 . BR($3) |xeg) {
            my $fh = safeopen '|xclip';
            print $fh $1;
            close $fh;
        }

        chomp $s;

        say $s;

        $s = sys qq. lsof | grep plugin-co | grep deleted ., 0;
        chomp $s;
        $s =~ s| (/tmp/Flash\S+)| BR($1) |xeg;
        say $s;
    }

    return undef;
}

# won't work if too many profiles
sub get_movie_from_browser_history {
    my $cmd = qq, find $ENV{HOME}/.mozilla/firefox -maxdepth 1 -type d | tail -n 1 ,;
    my $dir = sys $cmd;
    chomp $dir;
    $dir or error;
    my $file = "$dir/places.sqlite";
D2 'file', $file;
    -f $file or error "no file: $file";
    my $sql = qq, select url from moz_places where (url like '%youtube.com%'
        or url like '%youtu.be%') and url not like '%youtube.com/results%' order by moz_places.last_visit_date desc limit $num , ;
    $cmd = qq, sqlite3 "$file" "$sql", ;
    my $res = sys $cmd;
    my $url = (split /\n/, $res)[-1];

    return get_movie($url);
}

sub get_movie {
    my ($url) = @_;

    chdir $DIR or error qq. can't chdir to "$DIR" .;
    my $ps = sys "ps -eo pid,cmd";
    my $movie_file;
    my $get = 1;

    my $force = $opts{F} ? '-f' : '';
    my $cmd = qq, "$Yg" $force "$url" , ;

    D 'cmd', $cmd;

    say sys $cmd;
}

sub error {
    if ($Child_pid) {
        warn "Killing child.\n";
        if (! sys_return_code("ps $Child_pid")) {
            sys "kill $Child_pid", 0, 0;
            $? and warn "Couldn't kill: $!";
        }
    }
    if ($Out_file) {
        if (-e $Out_file) {
            warn "Removing output file.\n";
            sys "rm '$Out_file'";
        }
    }
    die join ' ', @_, "\n";
}


sub get_proc_with_ppid {

    my ($ppid, $cmd_str) = @_;
    my $t = new Proc::ProcessTable;
    my @children = grep { 
        $_->{ppid} == $ppid and
        $_->{cmndline} =~ /$cmd_str/
    } @{$t->table};

    @children > 1 and war D_QUIET "More than one proc matches", 'ppid', $ppid, 'str', $cmd_str;

    return @children ? (shift @children)->pid : undef;
}
